{"ast":null,"code":"'use strict';\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\n\nfunction shuffle(arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n}\n\n;\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\n\nshuffle.pick = function (arr, options) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n/**\n * Expose\n */\n\n\nmodule.exports = shuffle;","map":null,"metadata":{},"sourceType":"script"}