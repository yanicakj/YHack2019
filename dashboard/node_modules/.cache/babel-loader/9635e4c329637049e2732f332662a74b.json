{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* tslint:disable:jsx-no-multiline-js */\n\nconst d3_cloud_1 = __importDefault(require(\"d3-cloud\"));\n\nconst PropTypes = __importStar(require(\"prop-types\"));\n\nconst React = __importStar(require(\"react\"));\n\nconst react_measure_1 = __importDefault(require(\"react-measure\"));\n\nclass TagCloud extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      children: undefined,\n      height: 0,\n      width: 0,\n      wrappedChildren: []\n    };\n    this.mounted = false;\n    this.resizeTimer = undefined;\n    this.fontFamily = this.getStyleValue.bind(this, \"fontFamily\");\n    this.fontSize = this.getStyleValue.bind(this, \"fontSize\");\n    this.fontWeight = this.getStyleValue.bind(this, \"fontWeight\");\n    this.fontStyle = this.getStyleValue.bind(this, \"fontStyle\");\n    this.padding = this.getStyleValue.bind(this, \"padding\");\n\n    this.rotate = word => {\n      const value = word.child.props.rotate || this.props.rotate || TagCloud.defaultProps.rotate;\n\n      if (typeof value === \"function\") {\n        return value(word.child.props);\n      } else {\n        return value;\n      }\n    };\n\n    this.text = word => {\n      let text = word.child.props.text;\n\n      if (!text) {\n        const children = word.child.props.children;\n        text = Array.isArray(children) ? children[0] : children;\n      }\n\n      return text;\n    };\n\n    this.onResize = contentRect => {\n      const _contentRect$bounds = contentRect.bounds,\n            width = _contentRect$bounds.width,\n            height = _contentRect$bounds.height;\n\n      if (this.state.width !== width || this.state.height !== height) {\n        // Handle the initial size observer immediately\n        if (!this.state.width && !this.state.height) {\n          this.setState({\n            height,\n            width\n          });\n          return;\n        } // Handle resizes with a debounce timeout of 100ms\n\n\n        if (this.resizeTimer) {\n          clearTimeout(this.resizeTimer);\n        }\n\n        this.resizeTimer = setTimeout(() => {\n          this.resizeTimer = undefined;\n\n          if (this.mounted) {\n            this.setState({\n              children: undefined,\n              height,\n              width\n            });\n          }\n        }, 100);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  calculateLayout(props, state) {\n    const children = props.children,\n          spiral = props.spiral,\n          random = props.random,\n          style = props.style;\n    const width = state.width,\n          height = state.height;\n    const spiralAny = spiral;\n    return new Promise(resolve => {\n      const words = React.Children.map(children, child => ({\n        child\n      }));\n      let res = d3_cloud_1.default().size([width, height]).words(words).text(this.text).font(this.fontFamily).fontStyle(this.fontStyle).fontWeight(this.fontWeight).fontSize(this.fontSize).rotate(this.rotate).padding(this.padding);\n\n      if (spiralAny) {\n        res = res.spiral(spiralAny);\n      }\n\n      if (random) {\n        res = res.random(random);\n      }\n\n      res.on(\"end\", items => {\n        const newChildren = items.map((item, index) => {\n          let x = item.x;\n          x += item.x0;\n          x += width / 2;\n          let y = item.y;\n          y += item.y0;\n          y += height / 2;\n          const transform = \"translate(\".concat(x, \"px,\").concat(y, \"px) rotate(\").concat(item.rotate, \"deg)\");\n          const newStyle = Object.assign({\n            position: \"absolute\"\n          }, item.child.props.style, {\n            MozTransform: transform,\n            MsTransform: transform,\n            OTransform: transform,\n            WebkitTransform: transform,\n            fontFamily: item.font,\n            fontSize: item.size,\n            fontStyle: item.style,\n            fontWeight: item.weight,\n            textAlign: \"center\",\n            transform,\n            transformOrigin: \"center bottom\",\n            whiteSpace: \"nowrap\",\n            width: item.width\n          });\n\n          if (!newStyle.color && style.color && typeof style.color === \"function\") {\n            newStyle.color = style.color(item.child, index);\n          }\n\n          return React.cloneElement(item.child, Object.assign({}, item.child.props, {\n            key: item.text,\n            style: newStyle\n          }), item.child.props.children);\n        });\n        resolve(newChildren);\n      }).start();\n    });\n  }\n\n  getStyleValue(propName, word) {\n    const childValue = word.child.props.style ? word.child.props.style[propName] : undefined;\n    let value = childValue || this.props.style[propName] || TagCloud.defaultProps.style[propName];\n\n    if (typeof value === \"function\") {\n      value = value(word.child.props);\n    }\n\n    if (propName === \"fontSize\") {\n      value += 2;\n    }\n\n    return value;\n  }\n\n  render() {\n    const _a = this.props,\n          style = _a.style,\n          children = _a.children,\n          rotate = _a.rotate,\n          spiral = _a.spiral,\n          random = _a.random,\n          props = __rest(_a, [\"style\", \"children\", \"rotate\", \"spiral\", \"random\"]);\n\n    const fontFamily = style.fontFamily,\n          fontSize = style.fontSize,\n          fontWeight = style.fontWeight,\n          fontStyle = style.fontStyle,\n          color = style.color,\n          padding = style.padding,\n          otherStyle = __rest(style, [\"fontFamily\", \"fontSize\", \"fontWeight\", \"fontStyle\", \"color\", \"padding\"]);\n\n    const wrappedChildren = this.state.wrappedChildren;\n    return React.createElement(react_measure_1.default, {\n      bounds: true,\n      onResize: this.onResize\n    }, ({\n      measureRef\n    }) => React.createElement(\"div\", Object.assign({\n      ref: measureRef\n    }, props, {\n      style: otherStyle\n    }), wrappedChildren));\n  }\n\n  componentDidUpdate() {\n    const _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height;\n    const children = this.props.children;\n\n    if (width && height && children !== this.state.children) {\n      this.calculateLayout(this.props, this.state).then(wrappedChildren => {\n        if (!this.mounted) {\n          return;\n        }\n\n        this.setState({\n          children,\n          wrappedChildren\n        });\n      });\n    }\n  }\n\n}\n\nTagCloud.propTypes = {\n  children: PropTypes.any,\n  random: PropTypes.func,\n  rotate: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  spiral: PropTypes.oneOfType([PropTypes.oneOf([\"archimedean\", \"rectangular\"]), PropTypes.func]),\n  style: PropTypes.shape({\n    color: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    fontFamily: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    fontSize: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n    fontStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    fontWeight: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string]),\n    padding: PropTypes.oneOfType([PropTypes.func, PropTypes.number])\n  })\n};\nTagCloud.defaultProps = {\n  random: Math.random,\n  rotate: 0,\n  spiral: \"archimedean\",\n  style: {\n    fontFamily: \"serif\",\n    fontSize: 20,\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    padding: 1\n  }\n};\nexports.default = TagCloud;","map":null,"metadata":{},"sourceType":"script"}